// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  polls          Poll[]
  PollOptionVote PollOptionVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Poll {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  totalCount  Int      @default(0)
  createdAt   DateTime @default(now())
  endsAt      DateTime @default(now())
  updatedAt   DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  options        PollOption[]
  pollOptionVote PollOptionVote[]

  @@index([userId])
}

model PollOption {
  id         String  @id @default(cuid())
  text       String?
  totalCount Int     @default(0)

  Poll   Poll?   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String?

  userVotes PollOptionVote[]

  @@index([pollId])
}

model PollOptionVote {
  pollId       String
  userId       String
  pollOptionId String?

  poll       Poll        @relation(fields: [pollId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  pollOption PollOption? @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@id([userId, pollId])
  
  @@index([pollId])
  @@index([userId])
  @@index([pollOptionId])
}
